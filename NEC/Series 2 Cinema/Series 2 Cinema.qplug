--[[

  NEC Series 2 Cinema Projector Control Plugin for Q-SYS
  Author: Michael Goodyear
  Email: michael@locimation.com
  Version: 1.0

  Development sponsored by Chase Taylor,
  Sound Vision Technical LLC.
  
  (C) Copyright 2020 Locimation Pty Ltd

  Permission is hereby granted, free of charge,
  to any person obtaining a copy of this software
  and associated documentation files (the "Software"),
  to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the
  following conditions:

  The above copyright notice and this permission
  notice shall be included in all copies or substantial
  portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY
  OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO
  EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

]]

PluginInfo = {
  Name = "NEC~Digital Cinema~Series 2",
  Description = "Initial release",
  Version = "1.0.0",
  Id = "d4b7daea-1cad-43d1-abe1-028f38d022af"
}

LOGO = 'PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjxzdmcKICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICB4bWxuczpjYz0iaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvbnMjIgogICB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiCiAgIHhtbG5zOnN2Zz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciCiAgIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIKICAgdmVyc2lvbj0iMS4xIgogICBpZD0ic3ZnNDg1OCIKICAgdmlld0JveD0iMCAwIDMwMiA4MS45OTI1MTciCiAgIGhlaWdodD0iODEuOTkyNTE2IgogICB3aWR0aD0iMzAyIj4KICA8ZGVmcwogICAgIGlkPSJkZWZzNDg2MCIgLz4KICA8bWV0YWRhdGEKICAgICBpZD0ibWV0YWRhdGE0ODYzIj4KICAgIDxyZGY6UkRGPgogICAgICA8Y2M6V29yawogICAgICAgICByZGY6YWJvdXQ9IiI+CiAgICAgICAgPGRjOmZvcm1hdD5pbWFnZS9zdmcreG1sPC9kYzpmb3JtYXQ+CiAgICAgICAgPGRjOnR5cGUKICAgICAgICAgICByZGY6cmVzb3VyY2U9Imh0dHA6Ly9wdXJsLm9yZy9kYy9kY21pdHlwZS9TdGlsbEltYWdlIiAvPgogICAgICAgIDxkYzp0aXRsZT48L2RjOnRpdGxlPgogICAgICA8L2NjOldvcms+CiAgICA8L3JkZjpSREY+CiAgPC9tZXRhZGF0YT4KICA8ZwogICAgIHRyYW5zZm9ybT0idHJhbnNsYXRlKC01MDIuMDQ3ODIsLTY3Mi44NDE0MykiCiAgICAgaWQ9ImxheWVyMSI+CiAgICA8ZwogICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoMy44NzU1MDg0LDAsMCwtMy44NzU1MDg0LDUwMy4wNDc4Miw2NzYuMjk5NjMpIgogICAgICAgaWQ9Imc0NDU0Ij4KICAgICAgPHBhdGgKICAgICAgICAgaWQ9InBhdGg0NDU2IgogICAgICAgICBzdHlsZT0iZmlsbDojMTQxNGEwO2ZpbGwtb3BhY2l0eToxO2ZpbGwtcnVsZTpub256ZXJvO3N0cm9rZTpub25lIgogICAgICAgICBkPSJtIDAsMCA2LjIzLDAgYyAxLjQyNSwwIDMuMTA1LC0xLjMzMSAzLjg1NCwtMi4wNjMgbCAxMC45MywtMTIuMTE5IDAsMTQuMTgyIDMuNzEzLDAgMCwtMTkuMzQ5IC02LjUsMCBjIC0xLjE1OCwwLjAzOSAtMi4yOTUsMC4yNzcgLTMuNjIsMS41NzkgbCAtMTAuOTEyLDEyLjE0MSAwLC0xMy43MiAtMy42OTUsMCBMIDAsMCBaIiAvPgogICAgPC9nPgogICAgPGcKICAgICAgIHRyYW5zZm9ybT0ibWF0cml4KDMuODc1NTA4NCwwLDAsLTMuODc1NTA4NCw4MDMuMDQ3ODIsNzUxLjc5Nzk5KSIKICAgICAgIGlkPSJnNDQ1OCI+CiAgICAgIDxwYXRoCiAgICAgICAgIGlkPSJwYXRoNDQ2MCIKICAgICAgICAgc3R5bGU9ImZpbGw6IzE0MTRhMDtmaWxsLW9wYWNpdHk6MTtmaWxsLXJ1bGU6bm9uemVybztzdHJva2U6bm9uZSIKICAgICAgICAgZD0ibSAwLDAgYyAtNC40NDcsLTAuNjA3IC04Ljk0NiwtMC42NjcgLTEzLjQ1NCwtMC4yODggLTIuNjM5LDAuMjMzIC01LjIyNCwwLjc3NiAtNy41OTMsMi4wMTMgLTIuOTkxLDEuNTUgLTMuOTQ0LDUuMDM0IC0zLjkwNCw4LjE5MiAwLjAzMywyLjkxNSAwLjksNi4wMjcgMy41MDEsNy43MjIgMS43MDUsMS4xMTkgMy41MjYsMS40ODYgNS40NjEsMS44MzcgNS4yODIsMC45MzEgMTAuNTc0LDAuNzIxIDE1LjcyNywwLjE1NiBsIDAsLTIuNzYgYyAtNi4wNzcsMS4xODEgLTEyLjQ5NiwwLjg4NyAtMTQuNjc3LC0xLjkwNSAtMS4zNjMsLTEuNzM3IC0xLjU1NywtMy40NjUgLTEuNTU3LC00LjkyIDAsLTIuNjIyIDAuODk3LC02LjYgNi4yMjUsLTcuMzczIEMgLTYuNzk1LDIuMTY0IC0zLjM1NCwyLjU1MSAwLDMuMTYyIEwgMCwwIFoiIC8+CiAgICA8L2c+CiAgICA8ZwogICAgICAgdHJhbnNmb3JtPSJtYXRyaXgoMy44NzU1MDg0LDAsMCwtMy44NzU1MDg0LDY1NS41NjY0OSw3NDAuMTM1NDUpIgogICAgICAgaWQ9Imc0NDYyIj4KICAgICAgPHBhdGgKICAgICAgICAgaWQ9InBhdGg0NDY0IgogICAgICAgICBzdHlsZT0iZmlsbDojMTQxNGEwO2ZpbGwtb3BhY2l0eToxO2ZpbGwtcnVsZTpub256ZXJvO3N0cm9rZTpub25lIgogICAgICAgICBkPSJtIDAsMCBjIDAuNTI2LC0wLjAwNSA4LjkwMSwtMC4wNDQgMTEuNzc2LDAgbCAwLC0yLjg5MSBDIDUuOTg1LC0zLjExNCAwLjQyMSwtMy4yMTEgLTUuNDI5LC0yLjk2OCBjIC00Ljk2NCwwLjIwNSAtNS44MTksMi43MDEgLTUuOTE1LDUuMDk5IGwgMCwxNC4zNDEgMjIuODQzLDAgMCwtMi43NTUgLTE0Ljc3OCwwIDAsLTQuOTI2IDEzLjQ2OSwwIDAsLTIuNjg5IC0xMy40NjksMCBDIC0zLjI3OSw0LjY0NyAtMy4yMzEsMi45OTcgLTMuMjE3LDIuNyAtMy4xMzgsMC44MjQgLTIuMjY4LDAuMTM0IDAsMCIgLz4KICAgIDwvZz4KICA8L2c+Cjwvc3ZnPgo=';
SPONSOR = '';


function GetColor()
  return { 40, 80, 140 };
end;

function GetProperties()
  return {
    {
      Name = 'Title Count',
      Type = 'integer',
      Min = 2,
      Max = 100,
      Value = 8
    }
  }
end;

function GetControls(props)

  return {
    {
      Name = 'IP',
      ControlType = 'Text'
    },
    {
      Name = 'Error Present',
      ControlType = 'Indicator',
      IndicatorType = 'LED'
    },
    {
      Name = 'Error',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    },
    {
      Name = 'Power On',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Power Off',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Title',
      ControlType = 'Text',
      Count = props['Title Count'].Value
    },
    {
      Name = 'Lamp Hours',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    },
    {
      Name = 'Lens Mute On',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Lens Mute Off',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Power Status',
      ControlType = 'Indicator',
      IndicatorType = 'LED'
    },
    {
      Name = 'Process Status',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    },
    {
      Name = 'Lamp Status',
      ControlType = 'Indicator',
      IndicatorType = 'LED'
    },
    {
      Name = 'Outside Air Temp',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    },
    {
      Name = 'Exhaust Air Temp',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    },
    {
      Name = 'Lamp On',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Lamp Off',
      ControlType = 'Button',
      ButtonType = 'Trigger'
    },
    {
      Name = 'Title Select',
      ControlType = 'Button',
      ButtonType = 'Trigger',
      Count = props['Title Count'].Value
    },
    {
      Name = 'Connection',
      ControlType = 'Indicator',
      IndicatorType = 'Text'
    }
  };

end;

function GetControlLayout(props)

  local o = (props['Title Count'].Value - 8) * 16;

  local layout, graphics = {
    ['IP'] = {
      Position = { 54, 0 },
      Size = { 110, 16 },
      Margin = 1
    },
    ['Connection'] = {
      Position = { 54, 16 },
      Size = { 110, 16 },
      Margin = 1
    },
    ['Power Status'] = {
      Style = 'Button',
      Position = { 92, 52 },
      Size = { 36, 16 },
      Legend = 'PWR',
      Margin = 2,
      FontSize = 8
    },
    ['Lamp Status'] = {
      Style = 'Button',
      Position = { 128, 52 },
      Size = { 36, 16 },
      Legend = 'LAMP',
      Margin = 2,
      FontSize = 8
    },
    ['Process Status'] = {
      Position = { 0, 68 },
      Size = { 164, 16 },
      Margin = 1
    },
    ['Outside Air Temp'] = {
      Position = { 128, 268+o },
      Margin = 1
    },
    ['Exhaust Air Temp'] = {
      Position = { 128, 284+o },
      Margin = 1
    },
    ['Lamp Hours'] = {
      Position = { 128, 305+o },
      Margin = 1
    },
    ['Power On'] = {
      Position = { 92, 341+o },
      Margin = 2,
      Legend = 'On'
    },
    ['Power Off'] = {
      Position = { 128, 341+o },
      Margin = 2,
      Legend = 'Off'
    },
    ['Lens Mute On'] = {
      Position = { 92, 357+o },
      Margin = 2,
      Legend = 'On'
    },
    ['Lens Mute Off'] = {
      Position = { 128, 357+o },
      Margin = 2,
      Legend = 'Off'
    },
    ['Lamp On'] = {
      Position = { 92, 373+o },
      Margin = 2,
      Legend = 'On'
    },
    ['Lamp Off'] = {
      Position = { 128, 373+o },
      Margin = 2,
      Legend = 'Off'
    },
    ['Error Present'] = {
      Style = 'Button',
      Position = { 92, 409+o },
      Size = { 72, 16 },
      Margin = 2,
      FontSize = 8
    },
    ['Error'] = {
      Position = { 0, 425+o },
      Size = { 164, 80 },
      Margin = 1
    }
  }, {
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 0 },
      Size = { 54, 16 },
      Text = 'IP'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 16 },
      Size = { 54, 16 },
      Text = 'Status'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 52 },
      Size = { 64, 16 },
      Text = 'Process'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 104 },
      Size = { 128, 16 },
      Text = 'Title'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 268+o },
      Size = { 128, 16 },
      Text = 'Outside Air Temp'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 284+o },
      Size = { 128, 16 },
      Text = 'Exhaust Air Temp'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 305+o },
      Size = { 128, 16 },
      Text = 'Lamp Hours'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 341+o },
      Size = { 92, 16 },
      Text = 'Power'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 357+o },
      Size = { 92, 16 },
      Text = 'Douser'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 373+o },
      Size = { 92, 16 },
      Text = 'Lamp'
    },
    {
      Type = 'Label',
      HTextAlign = 'Left',
      Position = { 0, 409+o },
      Size = { 92, 16 },
      Text = 'Error'
    },
    {
      Type = 'Label',
      Position = {0,520+o},
      Size = {164,100},
      Text = 'Produced by Locimation Pty Ltd\nand distributed under\nMIT license.\n\nDevelopment sponsored by\nSound Vision Technical, LLC.',
      Color = { 0x99, 0x99, 0x99 }
    }
  };

  for i=1,props['Title Count'].Value do
    layout['Title ' .. i] = {
      Position = { 0, 104+(i*16) },
      Size = { 128, 16 },
      Style = 'ComboBox',
      Margin = 1
    };
    layout['Title Select ' .. i] = {
      Position = { 128, 104+(i*16) },
      Legend = 'Go',
      Margin = 2
    }
  end;

  for _,c in pairs(layout) do c.Position[2] = c.Position[2] + 75; end;
  for _,g in pairs(graphics) do g.Position[2] = g.Position[2] + 75; end;

  table.insert(graphics, {
    Type = 'Svg',
    Position = { 7, 10 },
    Size = { 150, 40 },
    Image = LOGO
  });

  table.insert(graphics, {
    Type = "Image",
    Position = { 10, 700 },
    Size = { 146, 84 },
    Image = SPONSOR
  });

  return layout, graphics;

end;

if(not Controls) then return; end;

DEBUG = false;

Sock = TcpSocket.New();
Sock.ReconnectTimeout = 1;
Sock.ReadTimeout = 5;
Sock.EventHandler = function(_, evt)
  print('# ' .. evt);
  if(evt == TcpSocket.Events.Reconnect) then
    status('blue', 'Reconnecting...');
  else
    status('red', 'SOCKET ' .. evt);
  end;
end;

function status(color, text)
  Controls.Connection.Color = color;
  Controls.Connection.String = text;
end;

function reconnect()
  if(Sock.IsConnected) then Sock:Disconnect(); end;
  if(Controls.IP.String == '') then return; end;
  Sock:Connect(Controls.IP.String, 43728);
  status('blue', 'Connecting...');
end; reconnect();
Controls.IP.EventHandler = reconnect;

Queries = { -- CKS at end
  ErrNo = '\x02\xBC\x00\x00\x01\x00', -- 3.2
  ErrCode = '\x02\xBD\x00\x00\x03\x00', -- 3.3
  Lamp = '\x03\x94\x00\x00\x00', -- 3.9
  Status = '\x00\x85\x00\x00\x01\x01', -- 3.15
  Temp = '\x00\x85\x00\x00\x01\xE4', -- 3.19
  Title = '\x02\xf2\x00\x00\x02\x00'
}

Commands = { -- on ... off
  ['Power'] = { '\x02\x00\x00\x00\x00', '\x02\x01\x00\x00\x00' },
  ['Lens Mute'] = { '\x02\x16\x00\x00\x00', '\x02\x17\x00\x00\x00' },
  ['Lamp'] = { '\x03\x2f\x00\x00\x02\x12\x01', '\x03\x2f\x00\x00\x02\x12\x02' }
};

for k, cp in pairs(Commands) do
  for i, a in ipairs({'On', 'Off'}) do
    Controls[k .. ' ' .. a].EventHandler = function()
      Send(cp[i]);
    end;
  end;
end;

function poller(always)
  Send(Queries.Temp);
  Send(Queries.Status);
  Send(Queries.ErrNo);
  if(ErrorCodes) then
    for _,e in ipairs(ErrorCodes) do
      if(not ErrorDescriptions[e]) then
        Send(Queries.ErrCode .. string.pack('<I2', e));
      end;
    end;
  end;
  if((always == true) or (os.time() % 360 == 0)) then
    Send(Queries.Lamp); 
    for i=0,99 do
      Send(Queries.Title .. string.char(i));
    end;
  end;
end;

PollTimer = Timer.New();
PollTimer.EventHandler = poller;
PollTimer:Start(1);

function CKS(d)
  local cks = 0;
  for c in d:gmatch('.') do
    cks = (cks + string.byte(c)) & 0xFF;
  end;
  return cks;
end;
  
function dq()
  if(not Sock.IsConnected) then return; end;
  if(#SendQueue > 0) then
    local pkt = table.remove(SendQueue, 1);
    if(DEBUG) then print('> ' .. bitstring.hexstream(pkt)); end;
    Sock:Write(pkt);
  else
    SendQueue = nil;
  end;
end;

function Send(d)
  if(not Sock.IsConnected) then return; end;
  local pkt = d .. string.char(CKS(d));
  if(SendQueue) then
    table.insert(SendQueue, pkt);
  else
    if(DEBUG) then print('> ' .. bitstring.hexstream(pkt)); end;
    Sock:Write(pkt);
    SendQueue = {};
  end;
end;

string.foundIn = function(s,t)
  for _,v in pairs(t) do
    if(v == s) then return true; end;
  end;
  return false;
end;

function refreshTitles()
  local choices = {};
  for i=1,99 do
    if(Titles[i] ~= '') then
      table.insert(choices, ('%03d: '):format(i) .. (Titles[i] or ('Title%02d'):format(i)))
    end;
  end;
  for i,c in ipairs(Controls['Title']) do
    c.Choices = choices;
    if(c.String == '') then c.String = choices[i]; end;
    c.Color = c.String:foundIn(choices) and '' or 'orange';
  end;
end;
for _,c in ipairs(Controls['Title']) do
  c.EventHandler = refreshTitles;
end;

function displayTitle(idx, title)
  if(not Titles) then Titles = {}; end;
  Titles[idx+1] = title;
  refreshTitles();
end;

for i,c in ipairs(Controls['Title Select']) do
  c.EventHandler = function()
    local idx = Controls['Title'][i].String:match('^(%d+):');
    if(not idx) then return; end;
    Send('\x02\x03\x00\x00\x02\x00' .. string.char(tonumber(idx) - 1));
  end;
end;

Sock.Connected = function()
  print('# Connected');
  SendQueue = nil;
  poller(true);
end;

SockReader = {};
Sock.Data = function()

  local function read()
  
    -- read header
    if(not SockReader.cmd) then
      if(Sock.BufferLength < 5) then return; end; -- available
      local hdr = Sock:Read(5);
      local code, cmd, model, id, len = string.unpack('<BBBBB', hdr); -- unpack
      SockReader = {code=code, cmd=cmd, model=model,id=id,len=len,pkt=hdr}; -- cache
    end;
    
    -- check body available
    if(Sock.BufferLength < SockReader.len + 1) then return; end;
    
    local body = (SockReader.len > 0 and Sock:Read(SockReader.len) or '');
    local cks = string.byte(Sock:Read(1));
    local verifiedCKS = CKS(SockReader.pkt .. body);
    if(cks == verifiedCKS) then
      local hdr = SockReader;
      SockReader = {};
      status('green', 'Connected');
      if(DEBUG) then print('< ' .. bitstring.hexstream(hdr.pkt .. body)); end;
      dq();
      return hdr, body;
    else
      print('# Invalid checksum received. Reconnecting...');
      reconnect();
    end;
    
  end;
  
  for hdr, body in read do
    
    -- Lamp hours
    if(hdr.cmd == 0x94) then
      local lampSecs = string.unpack('<I4', body);
      Controls['Lamp Hours'].String = math.floor(lampSecs / 3600);
    
    -- Running Status
    elseif(hdr.cmd == 0x85 and hdr.len == 0x10) then
      local power, cooling, process, status, lamp = string.unpack('xxBBBBxxxB', body);
      PowerStatus = power;
      PowerBlink = (process == 1);
      Controls['Lamp Status'].Value = lamp;
      Controls['Lamp Status'].Color = (lamp == 1) and 'lime' or '';
      Controls['Process Status'].String = ({
        'Standby', 'Power On Protect', 'Ignition', 'Power On Running', 'Running (Lamp On)', 'Cooling', '',
        'Reset Wait', 'Fan Stop Error', 'Lamp Retry', 'Lamp Error', '', 'Running (Lamp Off)'
      })[status + 1]; 

    -- Temperature
    elseif(hdr.cmd == 0x85 and hdr.len == 0x21) then 
      local outside, exhaust = string.unpack('<xxxxxi2xxi2', body);
      Controls['Outside Air Temp'].String = ('%.1f °C'):format(outside / 10);
      Controls['Exhaust Air Temp'].String = ('%.1f °C'):format(exhaust / 10);
    
    -- Title Query
    elseif(hdr.cmd == 0xf2) then
      local idx = string.unpack('<xB', body);
      local len = string.unpack('<B', body:sub(37));
      local title = body:sub(45, 45+len-1);
      displayTitle(idx, title);
      
    -- Error codes
    elseif(hdr.cmd == 0xbc) then
      local numErr = string.unpack('xB', body);
      local errorCodes = {string.unpack('<xx' .. string.rep('I2', numErr), body)};
      table.remove(errorCodes); -- string.unpack returning processed length
      ErrorCodes = errorCodes;
      
    -- Error descriptions
    elseif(hdr.cmd == 0xbd) then
      local code, desc = string.unpack('<xI2s1', body)
      ErrorDescriptions[code] = desc;

    -- Misc / debug
    else      
      print(hdr.cmd, (body~='') and bitstring.hexstream(body) or '');
    end;
    
  end;
  
end;

PowerLedBlinker = Timer.New();
PowerLedBlinker.EventHandler = function()
  local ctl = Controls['Power Status'];
  if(not PowerBlink) then
    ctl.Color = (PowerStatus==1) and 'lime' or '';
    ctl.Value = PowerStatus or 0;
  else
    if(PowerStatus == 1) then
      ctl.Boolean = not ctl.Boolean;
      ctl.Color = '';
    else
      ctl.Value = PowerStatus;
      if(ctl.Color == 'lime') then
        ctl.Color = 'green';
      else ctl.Color = 'lime'; end;
    end;
  end;
end;
PowerLedBlinker:Start(1);

ErrorDescriptions = {};
ErrorDisplayTimer = Timer.New();
ErrorDisplayTimer.EventHandler = function()
  local hasError = ErrorCodes and (#ErrorCodes > 0);
  Controls['Error Present'].Boolean = hasError;
  Controls['Error Present'].Color = hasError and '' or 'lime';
  Controls['Error Present'].Legend = hasError and 'Error Present' or 'No Errors';
  local errorText = '';
  for _,e in ipairs(ErrorCodes or {}) do
    errorText = errorText .. ('%d: %s\n'):format(e, ErrorDescriptions and ErrorDescriptions[e] or '<unknown>');
  end;
  Controls['Error'].String = errorText;
end;
ErrorDisplayTimer:Start(0.5);